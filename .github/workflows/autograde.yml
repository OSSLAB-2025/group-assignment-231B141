name: Autograding

on:
  push:
  workflow_dispatch:

jobs:
  autograde:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Ensure jq is available
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq

      # 1) File exists
      - id: test1
        run: |
          if [ -f team_greetings.md ]; then
            echo "score=1" >> $GITHUB_OUTPUT
          else
            echo "score=0" >> $GITHUB_OUTPUT
          fi

      # 2) Roll number format
      - id: test2
        run: |
          if grep -Eq "[0-9]{3}[A-Z][0-9]{3}" team_greetings.md 2>/dev/null; then
            echo "score=1" >> $GITHUB_OUTPUT
          else
            echo "score=0" >> $GITHUB_OUTPUT
          fi

      # 3) At least 3 unique roll numbers
      - id: test3
        run: |
          COUNT=$(grep -Eo "[0-9]{3}[A-Z][0-9]{3}" team_greetings.md 2>/dev/null | sort -u | wc -l)
          if [ "$COUNT" -gt 2 ]; then
            echo "score=1" >> $GITHUB_OUTPUT
          else
            echo "score=0" >> $GITHUB_OUTPUT
          fi

      # 4) Branch name format (+2)
      - id: test4
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          if [[ "$BRANCH" =~ ^feature/[0-9]{3}[A-Z][0-9]{3}$ ]]; then
            echo "score=2" >> $GITHUB_OUTPUT
          else
            echo "score=0" >> $GITHUB_OUTPUT
          fi

      # 5) Collaborators via API (+2)
      - id: test5
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER="${GH_REPO%/*}"
          REPO="${GH_REPO#*/}"
          RESP=$(curl -sf -H "Authorization: token ${GH_TOKEN}" \
            "https://api.github.com/repos/${OWNER}/${REPO}/collaborators" || echo "")
          COLLAB_COUNT=$(echo "$RESP" | jq 'length')
          if [ "$COLLAB_COUNT" -ge 2 ]; then
            echo "score=2" >> $GITHUB_OUTPUT
          else
            echo "score=0" >> $GITHUB_OUTPUT
          fi

      # 6) Unique commit authors (+3)
      - id: test6
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER="${GH_REPO%/*}"
          REPO="${GH_REPO#*/}"
          RESP=$(curl -sf -H "Authorization: token ${GH_TOKEN}" \
            "https://api.github.com/repos/${OWNER}/${REPO}/commits?per_page=100" || echo "")
          AUTHORS=$(echo "$RESP" | jq -r '[ .[].author.login, .[].committer.login ] | map(select(. != null)) | unique | .[]?')
          COUNT=$(echo "$AUTHORS" | grep -c . || true)
          if [ "$COUNT" -ge 2 ]; then
            echo "score=3" >> $GITHUB_OUTPUT
          else
            echo "score=0" >> $GITHUB_OUTPUT
          fi

      # Final aggregation step
      - name: Save score for GitHub Classroom
        run: |
          S1=${{ steps.test1.outputs.score }}
          S2=${{ steps.test2.outputs.score }}
          S3=${{ steps.test3.outputs.score }}
          S4=${{ steps.test4.outputs.score }}
          S5=${{ steps.test5.outputs.score }}
          S6=${{ steps.test6.outputs.score }}

          TOTAL=$((S1+S2+S3+S4+S5+S6))

          mkdir -p .github/classroom
          cat > .github/classroom/results.json <<EOF
          {
            "version": 1,
            "tests": [
              { "name": "team_greetings.md exists", "score": $S1, "max_score": 1 },
              { "name": "Roll number format",       "score": $S2, "max_score": 1 },
              { "name": "3+ unique roll numbers",   "score": $S3, "max_score": 1 },
              { "name": "Branch name feature/ID",   "score": $S4, "max_score": 2 },
              { "name": "2+ collaborators (API)",   "score": $S5, "max_score": 2 },
              { "name": "2+ commit authors (API)",  "score": $S6, "max_score": 3 }
            ],
            "summary": "Total score $TOTAL out of 10"
          }
          EOF
OF
